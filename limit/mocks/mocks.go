// Code generated by MockGen. DO NOT EDIT.
// Source: limit/limit.go

// Package mock_limit is a generated GoMock package.
package mock_limit

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLimiter is a mock of Limiter interface.
type MockLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockLimiterMockRecorder
}

// MockLimiterMockRecorder is the mock recorder for MockLimiter.
type MockLimiterMockRecorder struct {
	mock *MockLimiter
}

// NewMockLimiter creates a new mock instance.
func NewMockLimiter(ctrl *gomock.Controller) *MockLimiter {
	mock := &MockLimiter{ctrl: ctrl}
	mock.recorder = &MockLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimiter) EXPECT() *MockLimiterMockRecorder {
	return m.recorder
}

// Take mocks base method.
func (m *MockLimiter) Take() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Take")
}

// Take indicates an expected call of Take.
func (mr *MockLimiterMockRecorder) Take() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Take", reflect.TypeOf((*MockLimiter)(nil).Take))
}
